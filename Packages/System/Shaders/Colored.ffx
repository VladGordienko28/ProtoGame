//-----------------------------------------------------------------------------
//	Colored.hlsl: A simple shader for flat shaded primitives
//	Created by Vlad Gordienko, 2018
//-----------------------------------------------------------------------------

#include "Common.ffxh"

cbuffer Effect : register( b2 )
{
	float4 color;
}

vertex_decl VertexDecl_XY
{
	["RG32_F", "Position", 0, 0]
}

struct VsInput
{
	float2 position : POSITION;
};

struct VsOutput
{
	float4 position : SV_Position;
};

VsOutput vsMain( in VsInput input )
{
	VsOutput output;
	output.position = mul( float4( input.position, 0.f, 1.f ), g_viewProjectionMatrix );
	return output;
}

float4 psSolid( in VsOutput input ) : SV_Target
{
	return color;
}

float4 psStipple( in VsOutput input ) : SV_Target
{
	if( ( int( input.position.x - input.position.y ) % 4 ) == 0 )
		discard;

	return color;
}

technique Solid
{
	vertex_shader = vsMain;
	pixel_shader = psSolid;
}

technique Stipple
{
	vertex_shader = vsMain;
	pixel_shader = psStipple;
}
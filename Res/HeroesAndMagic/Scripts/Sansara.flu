/**
 * @Sansara: ...
 * @Author: ...
 */
script Sansara
{
private:
    const DAGGER_SPEED = 30.0;
    const ATTACK_SPEED = 35.0;
    const MELEE_SPEED = 20.0;
    const FLIP_SPEED = 20.0;
    
    aabb WalkArea;
    
    event OnBeginPlay()
    {
        float maxHeight;
    
        if( $Puppet.GetWalkArea( WalkArea.min.x, WalkArea.max.x, maxHeight ) )
        {
            WalkArea.min.y = Location.y;
            WalkArea.max.y = Location.y + maxHeight;
         
            //DebugRect( WalkArea, rgba( 0, 255, 0, 255 ), 25.0 );  
            info( "Sansara.$Puppet.GetWalkArea successed %a", WalkArea );
        }
        else
        {
            warn( "Sansara.$Puppet.GetWalkArea failed!" );
        }   
    }

    fn throwDagger( float speed )
    {
        Dagger d = new Dagger;
        d.SetLocation( Location + [$Sprite.bFlipH ? Size.x : -Size.x, 0.0] );
        d.Velocity.x = $Sprite.bFlipH ? speed : -speed;
    }

    thread
    {
    @Roam:
        $Sprite.PlayAnim( "Run", 30.0, ANIM_Loop );
        StartRoam( 8.0 );
        wait $Puppet.MoveStatus() != MOVE_InProgress;
        //info( "Roam completed!" );
        

        // --
       if( randomf() < 0.33 )
            goto @Attack;
        else if( randomf() > 0.5 )
            goto @Melee;
        else
            goto @Flip;
        // --
    
 
    @Attack:
        //sleep 2.0;
        $Sprite.PlayAnim( "Attack", ATTACK_SPEED, ANIM_Once );        
        
        sleep 10.0 * (1.0 / ATTACK_SPEED); // 10
        throwDagger( DAGGER_SPEED );
        
        sleep 8.0 * (1.0 / ATTACK_SPEED); // 18
        throwDagger( DAGGER_SPEED );

        sleep 13.0 * (1.0 / ATTACK_SPEED); // 31
        throwDagger( DAGGER_SPEED );              
        
        goto @Roam;
        
    @Melee:
        $Sprite.PlayAnim( "Melee", MELEE_SPEED, ANIM_Once );
        wait !$Sprite.IsPlaying();
        goto @Roam;
        
    @Flip:
        $Sprite.PlayAnim( "Flip", FLIP_SPEED, ANIM_Once );
        
        sleep 3.0 * (1.0 / FLIP_SPEED); // 5
        //Forces.x = 2000;
        Velocity.x = $Sprite.bFlipH ? -40.0 : 40.0;
        
        sleep 6.0 * (1.0 / FLIP_SPEED); // 11
        
        Velocity.x = 0.0;      
        
        wait !$Sprite.IsPlaying();
        goto @Roam;      
    } 
    
    // prepare Sansara for roaming step
    fn StartRoam( float minDistance )
    {
        assert( Location.x >= WalkArea.min.x && Location.x <= WalkArea.max.x );
        vector destination = Location;
     
        do
        {
            destination.x = WalkArea.min.x + randomf() * ( WalkArea.max.x - WalkArea.min.x );
        } 
        while( abs( Location.x - destination.x ) < minDistance )
        
        //DebugPoint( destination, rgba( 255, 255, 255, 255 ), 10.0, 20.0 );        
        $Puppet.MoveToPoint( destination, Size.X * 0.5, PATH_Walk );
        $Sprite.bFlipH = destination.x > Location.x;  
    }
}

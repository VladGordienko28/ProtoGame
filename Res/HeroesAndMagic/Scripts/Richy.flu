/**
 * @Richy: A first playable guy
 * @Author: vlad
 */
script Richy: family Players
{
public:
    const WALK_SPEED = 10.0;
    const DAMAGE_AREA = 3.5;

    const LEVEL_VIEW_AREA = 5.0;

    float xSpeedRescaler;

    event OnBeginPlay()
    {
        Level.Camera.Zoom = 1.0;
        //Level.Camera.Location = Location;
    }

    event OnPreTick( float delta )
    {
        if( label != @TakeHit && label != @Died )
        {   
            float walkSpeed = WALK_SPEED * xSpeedRescaler;        
    
            if( KeyIsPressed( KEY_A ) )
            {
                Velocity.x = -walkSpeed;
                $Sprite.bFlipH = true;
            }
            else if( KeyIsPressed( KEY_D ) )
            {
                Velocity.x = walkSpeed;
                $Sprite.bFlipH = false;   
            }
            else
            {
                Velocity.x = 0.0;
            }
        }
    }

    event OnKeyDown( integer key )
    {
        if( label != @TakeHit && label != @Died )
        {  
            if( label != @Attack && key == KEY_K )
            {
                goto @Attack;
            }
            else if( key == KEY_L )
            {
                goto @EnterBlock;
            }
        }
        
        // temp!!!!!!!!!!!!!!!!!!!!!!!!!!!
        if( key == KEY_Q )
        {
            TakeDamage( 1, this, "auto" );
        }
    }

    event OnKeyUp( integer key )
    {
        if( key == KEY_L && (label == @Block || label == @EnterBlock) )
        {
            goto @Normal;
        }
    }
    
    fn AttackWithDamage()
    {
        aabb rect;
        entity e;
        
        if( !$Sprite.bFlipH )
        {
            rect.min = [ Location.x, Location.y - Size.y * 0.3 ];
            rect.max = [ Location.x + DAMAGE_AREA, Location.y + Size.y * 0.3 ];
        }
        else
        {
            rect.min = [ Location.x - DAMAGE_AREA, Location.y - Size.y * 0.3 ];
            rect.max = [ Location.x, Location.y + Size.y * 0.3 ];
        }
        
        //DebugRect( rect, rgba(255, 255, 255, 255), 0.8 );        
        
        foreach( e : RectEntities( null, rect ) )
        {
            if( e in Destroyable )
            {
                Destroyable d = Destroyable(e);
                d.TakeDamage( 1 );                
            }
            else if( e in Enemies )
            {
                Enemies enemy = Enemies(e);
                enemy.TakeDamage( 1, this, "unknown" );
            }
        }
    }

    event OnTick( float delta )
    {
        if( Level.Camera.Location.X < Location.X - LEVEL_VIEW_AREA ) Level.Camera.Location.X = Location.X - LEVEL_VIEW_AREA;
        if( Level.Camera.Location.X > Location.X + LEVEL_VIEW_AREA ) Level.Camera.Location.X = Location.X + LEVEL_VIEW_AREA;             
        if( Level.Camera.Location.Y < Location.Y - LEVEL_VIEW_AREA ) Level.Camera.Location.Y = Location.Y - LEVEL_VIEW_AREA;
        if( Level.Camera.Location.Y > Location.Y + LEVEL_VIEW_AREA ) Level.Camera.Location.Y = Location.Y + LEVEL_VIEW_AREA;                                                               
    }

    bool IsDied() unified
    {
        return label == @Died;
    }

    fn TakeDamage( integer amount, entity instigator, string type ) unified
    {
        if( label != @Died )
        {
            if( label == @Block )
            {
                bool enemyAtLeft = instigator.Location.x < Location.x;
                
                if( enemyAtLeft == $Sprite.bFlipH )
                    return;   
            }
        
            $Puppet.Health -= amount;
        
            if( $Puppet.Health <= 0 )
            {
                goto @Died;
            }
            else
            {
                goto @TakeHit;            
            }        
        }
    }

    thread
    {
        @Normal:
            xSpeedRescaler = 1.0;
        
            if( Velocity.X != 0.0 )
            {
                 $Sprite.PlayAnim( "Run", 10.0, ANIM_Loop );
            }
            else
            {
                $Sprite.PlayAnim( "Idle", 7.0, ANIM_Loop );
            }

            goto @Normal;
            
        @Attack:
            xSpeedRescaler = 0.5;
            $Sprite.PlayAnim( "Attack", 19.0, ANIM_Once );
            sleep 0.3;
            AttackWithDamage();
            wait !$Sprite.IsPlaying();
            goto @Normal;
            
        @EnterBlock:
            xSpeedRescaler = 0.0;
            $Sprite.PlayAnim( "EnterBlock", 10.0, ANIM_Once );    
            wait !$Sprite.IsPlaying();
            goto @Block;
            
        @Block:
            xSpeedRescaler = 0.5;
            if( Velocity.X != 0.0 )
            {
                 $Sprite.PlayAnim( "RunAndBlock", 6.0, ANIM_Loop );
            }
            else
            {
                $Sprite.PlayAnim( "Block", 10.0, ANIM_Loop );
            }
            
            goto @Block;
            
        @TakeHit:
            $Sprite.PlayAnim( "Hit", 10.0, ANIM_Once );
            Velocity = [0.0, 0.0];
            wait !$Sprite.IsPlaying();
            goto @Normal;
            
        @Died:
            $Sprite.PlayAnim( "Die", 10.0, ANIM_Once );
            Velocity = [0.0, 0.0];
            wait !$Sprite.IsPlaying();
            sleep 5.0;
            delete this;
    }
}
